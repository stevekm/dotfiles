##############################################################################
#   Filename: bashrc_extras
#        URL: https://github.com/stevekm/dotfiles
##############################################################################


##############################################################################
# Globals
##############################################################################

if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Locality settings
export LC_ALL=C


##############################################################################
# Console Colors
##############################################################################
# Remote servers
# export PS1="\[\033[96m\]\u\[\033[m\]@\[\033[92m\]\h:\[\033[33;1m\]\w\[\033[m\]\$ "

# Local machines
export PS1="\[\033[96m\]\u\[\033[m\]@\[\033[31m\]\h:\[\033[33;1m\]\w\[\033[m\]\$ "

export CLICOLOR=1


##############################################################################
# Timestamp bash Prompt
# from here: https://wiki.archlinux.org/index.php/Color_Bash_Prompt
# ex:
# [2017-06-02 13:46:36]
# kellys04@mac01:~$
##############################################################################

command_prompt_date_string () {
	printf '\033[0;35m[%s]\033[m\n' "$(date +%F\ %T)"
}
export PROMPT_COMMAND="echo; command_prompt_date_string"

##############################################################################
# Aliases & Functions
##############################################################################
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias l='ls -Gah'
alias lt='ls -Glahtr'
alias ltt='ls -Glahtr | tail'
alias ll='ls -lah'

# git
alias gp='git pull'
alias gpp='git pull && git push origin master'
alias gst='git status'
alias gau='git add -u'

# add to your .gitignore
gi () { echo "$1" >> .gitignore; printf "%s added to .gitignore" "$1" ; }

# keep ssh from dying due to inactivity
alias ssh='ssh -o ServerAliveInterval=60'


# Print CSV files to terminal better
# https://chrisjean.com/view-csv-data-from-the-command-line/
# NOTE: column does not handle lines over 2k in length. This limit is patched in version 9.0.6 of bsdmainutils. Unfortunately, most systems currently run 9.0.5 of that library
catcsv () {
    local myfile="$1"
    cat "$myfile" | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -N -S
}


# Enumerate TSV and CSV file header fields, so you know which field to 'cut' on
nheadt () {
	local input_file="$1"
	head -1 "$input_file" | tr '\t' '\n' | cat -n
}

nheadc () {
	local input_file="$1"
	head -1 "$input_file" | tr ',' '\n' | cat -n
}

# touch a file and make it executable, useful for creating new scripts quickly with a single command
touchx () { touch "$1"; chmod +x "$1"; }



##############################################################################
# I added this line to try and make my bitbucket repos clone properly, they keep trying to call GTK GUI stuff
##############################################################################
[ -n "$SSH_CONNECTION" ] && unset SSH_ASKPASS
# I commented this out when I couldnt clone a git repo from NYULMC github
# I re-un-commented this when I couldnt clone another git repo..


##############################################################################
# Mange the bash history better
##############################################################################

export HISTCONTROL=ignoreboth:erasedups
shopt -s histappend
export PROMPT_COMMAND="${PROMPT_COMMAND}; history -a"
export HISTFILESIZE=1000000
export HISTSIZE=1000000

# I'm not a fan of this one but here it is
# export PROMPT_COMMAND="history -a; history -c; history -r; ${PROMPT_COMMAND}"
# http://www.linuxjournal.com/content/using-bash-history-more-efficiently-histcontrol
# use this to remove duplicates that are already preset:
# # cat .bash_history | awk '!x[$0]++' > .bash_history2


# press up/down after typing a command on console to search history of just that command
# this is stored in .inputrc file
# # make sure the file exists
# # if it doesnt exist

if [ ! -f ~/.inputrc ]; then
  # print this to the file
  echo "Creating ~/.inputrc, adding history management entries"
  echo -e "Check with:\ncat ~/.inputrc"
  echo "Might have to restart the shell before it works"
  printf '%s\n%s\n' '"\e[A": history-search-backward' '"\e[B": history-search-forward' >> ~/.inputrc
  # source the file # wait don't do that..
  # source ~/.inputrc
elif [ -f ~/.inputrc ]; then
  # if file exists
  # check if entries are not present
  if grep -q "history-search-backward" ~/.inputrc; then
    :
  else
    # add the entry if its not there
    echo "Adding history management entries to ~/.inputrc"
    echo -e "Check with:\ncat ~/.inputrc"
    echo "Might have to restart the shell before it works"
    printf '%s\n' '"\e[A": history-search-backward' >> ~/.inputrc
  fi

  if grep -q "history-search-forward" ~/.inputrc; then
    :
  else
    echo "Adding history management entries to ~/.inputrc"
    echo -e "Check with:\ncat ~/.inputrc"
    echo "Might have to restart the shell before it works"
    printf '%s\n' '"\e[B": history-search-forward' >> ~/.inputrc
  fi

  # source ~/.inputrc # don't do this..?
fi

##############################################################################
# Extract archives
##############################################################################

extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjvf $1    ;;
      *.tar.gz)    tar xzvf $1    ;;
      *.bz2)       bzip2 -d $1    ;;
      *.rar)       unrar2dir $1    ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1    ;;
      *.tgz)       tar xzf $1    ;;
      *.zip)       unzip2dir $1     ;;
      *.Z)         uncompress $1    ;;
      *.7z)        7z x $1    ;;
      *.ace)       unace x $1    ;;
      *)           echo "'$1' cannot be extracted via extract()"   ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


##############################################################################
# Task Logging Function
##############################################################################
# https://news.ycombinator.com/item?id=7409926
#now() {
#      echo $(date "+%Y-%m-%d %H:%M:%S") - "$@" >> $HOME/.now
#    }

source ~/dotfiles/project_logger.sh

if [ -f ~/dotfiles/project_logger.sh ]; then
	source ~/dotfiles/project_logger.sh
elif [ -f /ifs/home/$(whoami)/dotfiles/project_logger.sh ]; then
	source /ifs/home/$(whoami)/dotfiles/project_logger.sh
fi
