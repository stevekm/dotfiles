##############################################################################
#   Filename: bashrc_extras                                                  
#        URL: https://github.com/stevekm/dotfiles                   
#                                                                            
##############################################################################


##############################################################################
# Source global definitions
##############################################################################

if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific aliases and functions
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias l='ls -Gah'
alias lt='ls -Glahtr'
alias ltt='ls -Glahtr | tail'
alias ll='ls -lGah'
alias gp='git pull'
alias gpp='git pull && git push origin master'
alias gst='git status'

##############################################################################
# I added this line to try and make my bitbucket repos clone properly, they keep trying to call GTK GUI stuff
##############################################################################
[ -n "$SSH_CONNECTION" ] && unset SSH_ASKPASS
# I commented this out when I couldn't clone a git repo from NYULMC github
# I re-un-commented this when I couldn't clone another gir repo..

##############################################################################
# Add colors to the console
# thanks to http://osxdaily.com/2013/02/05/improve-terminal-appearance-mac-os-x/
##############################################################################

# for remote servers I use this
export PS1="\[\033[96m\]\u\[\033[m\]@\[\033[92m\]\h:\[\033[33;1m\]\w\[\033[m\]\$ "

# for local machines I use this
# export PS1="\[\033[96m\]\u\[\033[m\]@\[\033[31m\]\h:\[\033[33;1m\]\w\[\033[m\]\$ "
export CLICOLOR=1
# export LSCOLORS=ExFxBxDxCxegedabagacad # could also try this one

##############################################################################
# Mange the bash history better..
##############################################################################

export HISTCONTROL=ignoredups:erasedups
shopt -s histappend
export PROMPT_COMMAND='history -a'
export HISTFILESIZE=400000000
export HISTSIZE=10000
# I'm not a fan of this one but here it is
# export PROMPT_COMMAND="history -a; history -c; history -r; ${PROMPT_COMMAND}"

# press up/down after typing a command on console to search history of just that command
# this is stored in .inputrc file
# # make sure the file exists
# # if it doesnt exist
if [ ! -f ~/.inputrc ]; then
  # print this to the file
  echo "Creating ~/.inputrc, adding history management entries"
  echo -e "Check with:\ncat ~/.inputrc"
  echo "Might have to restart the shell before it works"
  printf '%s\n%s\n' '"\e[A": history-search-backward' '"\e[B": history-search-forward' >> ~/.inputrc
  # source the file # wait don't do that..
  # source ~/.inputrc
elif [ -f ~/.inputrc ]; then
  # if file exists
  # check if entries are not present
  if grep -q "history-search-backward" ~/.inputrc; then
    :
  else
    # add the entry if its not there
    echo "Adding history management entries to ~/.inputrc"
    echo -e "Check with:\ncat ~/.inputrc"
    echo "Might have to restart the shell before it works"
    printf '%s\n' '"\e[A": history-search-backward' >> ~/.inputrc
  fi
  
  if grep -q "history-search-forward" ~/.inputrc; then
    :
  else    
    echo "Adding history management entries to ~/.inputrc"
    echo -e "Check with:\ncat ~/.inputrc"
    echo "Might have to restart the shell before it works"
    printf '%s\n' '"\e[B": history-search-forward' >> ~/.inputrc
  fi
  
  # source ~/.inputrc # don't do this..?
fi
##############################################################################
# Locality settings
##############################################################################
export LC_ALL=C

##############################################################################
# Extract archives
##############################################################################

extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjvf $1    ;;
      *.tar.gz)    tar xzvf $1    ;;
      *.bz2)       bzip2 -d $1    ;;
      *.rar)       unrar2dir $1    ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1    ;;
      *.tgz)       tar xzf $1    ;;
      *.zip)       unzip2dir $1     ;;
      *.Z)         uncompress $1    ;;
      *.7z)        7z x $1    ;;
      *.ace)       unace x $1    ;;
      *)           echo "'$1' cannot be extracted via extract()"   ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

#bu - Back Up a file. Usage "bu filename.txt"
bu () {
  cp $1 ${1}-`date +%Y%m%d%H%M`.backup;
}

##############################################################################
# Task Logging Function 
##############################################################################
# https://news.ycombinator.com/item?id=7409926
#now() {
#      echo $(date "+%Y-%m-%d %H:%M:%S") - "$@" >> $HOME/.now
#    }

source ~/dotfiles/now_log.sh
