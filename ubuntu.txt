# some packages commonly installed in Ubuntu
# sudo apt install

# utilities
git
htop
btop
make
screen
bzip2
curl
tree
awscli
openjdk-18-jre

# dev
r-base
python
openjdk-18-jdk
# install Golang https://go.dev/dl/ ; sudo tar -C /usr/local -xvf go1.16.7.linux-amd64.tar.gz ; sudo nano ~/.profile ; export PATH=$PATH:/usr/local/go/bin



# system tools (some of these might not be needed or might be deprecated)
hddtemp
inxi
jq
lm-sensors
net-tools
psensor
openssh-server
sensors-applet
sublime-text
sysstat
stress-ng
flatpak
apt-transport-https
flatpak
# https://flatpak.org/setup/Ubuntu



# install Docker; https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04
# First, update your existing list of packages:
# sudo apt update
# Next, install a few prerequisite packages which let apt use packages over HTTPS:
# sudo apt install apt-transport-https ca-certificates curl software-properties-common
# Then add the GPG key for the official Docker repository to your system:
# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# Add the Docker repository to APT sources:
# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
# Make sure you are about to install from the Docker repo instead of the default Ubuntu repo:
# apt-cache policy docker-ce
# Finally, install Docker:
# sudo apt install docker-ce
# Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it’s running:
# sudo systemctl status docker
# If you want to avoid typing sudo whenever you run the docker command, add your username to the docker group:
# sudo usermod -aG docker ${USER}
# To apply the new group membership, log out of the server and back in, or type the following:
# su - ${USER}
# Confirm that your user is now added to the docker group by typing:
# groups
# If you need to add a user to the docker group that you’re not logged in as, declare that username explicitly using:
# sudo usermod -aG docker username
# test that it works;
# $ docker run --rm -ti ubuntu:latest


# install Singularity
# https://docs.sylabs.io/guides/3.11/admin-guide/installation.html
# https://github.com/sylabs/singularity/releases
# see also; https://sylabs.io/2023/03/installing-singularityce-on-macos-with-apple-silicon-using-utm/
# install Golang; https://go.dev/doc/install
# tar -C /usr/local -xzf go1.20.2.linux-amd64.tar.gz
# add the following line to your $HOME/.profile or /etc/profile (for a system-wide installation):
# export PATH=$PATH:/usr/local/go/bin
# Verify
# go version
# On Ubuntu or Debian install the following dependencies:
# # Ensure repositories are up-to-date
# sudo apt-get update
# # Install debian packages for dependencies
# sudo apt-get install -y \
#    build-essential \
#    libseccomp-dev \
#    libglib2.0-dev \
#    pkg-config \
#    squashfs-tools \
#    cryptsetup \
#    runc
# Download source code
# $ export VERSION=3.11.0 && # adjust this as necessary \
#     wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-ce-${VERSION}.tar.gz && \
#     tar -xzf singularity-ce-${VERSION}.tar.gz && \
#     cd singularity-ce-${VERSION}
# Compile Singularity
# $ ./mconfig --without-conmon &&     make -C ./builddir &&     sudo make -C ./builddir install
# Test that it works
# $ singularity exec library://alpine cat /etc/alpine-release
# $ singularity pull container.sif docker://alpine:latest

# OLD docs for Singularity installation;
# https://singularity-tutorial.github.io/01-installation/
# https://apptainer.org/admin-docs/master/installation.html
# https://github.com/apptainer/singularity/releases




# boot settings
# show all messages during boot
# $ cat /etc/default/grub
# If you change this file, run 'update-grub' afterwards to update
# /boot/grub/grub.cfg.
# For full documentation of the options in this file, see:
#   info -f grub -n 'Simple configuration'
# https://askubuntu.com/questions/248/how-can-i-show-or-hide-boot-messages-when-ubuntu-starts
#GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
#After editing the file, you need to run update-grub.
#sudo update-grub
GRUB_CMDLINE_LINUX_DEFAULT=""
GRUB_CMDLINE_LINUX=""



# Nividia Driver Installation
# https://help.ubuntu.com/community/NvidiaDriversInstallation
# ^^^ this one never seems to work right
#
# CUDA installation
# https://docs.nvidia.com/cuda/cuda-installation-guide-linux/
# https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=deb_network
# more issues here; https://askubuntu.com/questions/1436506/how-to-resolve-unmet-dependencies-error-when-upgrading-depends-nvidia-kernel-c
#
# first install the nvidia driver;
# sudo apt install nvidia-driver-515
#
# then do the local CUDA install method
# wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
# sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
# wget https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-ubuntu2204-12-1-local_12.1.0-530.30.02-1_amd64.deb
# sudo dpkg -i cuda-repo-ubuntu2204-12-1-local_12.1.0-530.30.02-1_amd64.deb
# sudo cp /var/cuda-repo-ubuntu2204-12-1-local/cuda-*-keyring.gpg /usr/share/keyrings/
# sudo apt-get update
# sudo apt-get -y install cuda

# https://stackoverflow.com/questions/43022843/nvidia-nvml-driver-library-version-mismatch




# Swap file configuration
# https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-22-04
# https://askubuntu.com/questions/927854/how-do-i-increase-the-size-of-swapfile-without-removing-it-in-the-terminal
# https://help.ubuntu.com/community/SwapFaq
# check existing swap and memory usages
# $ sudo swapon --show
# $ free -h
# $ df -h
# create 100GB swap file
# $ sudo fallocate -l 100G /swapfile
# $ sudo chmod 600 /swapfile
# $ sudo mkswap /swapfile
# $ sudo swapon /swapfile
# can be done with multiple files for swap
# add to /etc/fstab to make permanent
# entry should look like this
# '/swapfile none swap sw 0 0'




# Format and mount drive
# https://phoenixnap.com/kb/linux-format-disk
# https://kwilson.io/blog/format-a-linux-disk-as-ext4-from-the-command-line/
# https://askubuntu.com/questions/517354/terminal-method-of-formatting-storage-drive
# https://help.ubuntu.com/community/Fstab
# find drive UUID
# $ lsblk -f
# also
# $ ls -l /dev/disk/by-uuid/
# format drive
# $ sudo mkfs ext4 -L P4600 /dev/nvme2n1p1 # wait this one did not work it make an ext2 volume instead
# $ sudo mkfs.ext4 -L P4600 /dev/nvme2n1p1
# get UUID again
# $ lsblk -f
# mount the drive
# $ sudo mount UUID=ebbb4fad-6329-4914-b800-e3ed22b36574 /mnt/P4600
# add to /etc/fstab
# UUID=ebbb4fad-6329-4914-b800-e3ed22b36574 /mnt/P4600               ext4    defaults 0       0
# mount all volumes
# $ sudo mount -a




